import Foundation

// MARK: - Task #1 [eazy] ‚úÖ

print("Task #1")
let vehicleType = "car"

enum Permission: String {
    case yes = "–∏–º–µ–µ—Ç—Å—è"
    case no = "–Ω–µ –∏–º–µ–µ—Ç—Å—è"
    case unknown = "–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"
}

func vehicleDescription(type: String) {
    let tuple : (type: String, description: String, permission: String) = switch vehicleType {
    case "car": ("–º–∞—à–∏–Ω–∞", "–ª–µ–≥–∫–æ–≤–∞—è", Permission.yes.rawValue)
    case "bike": ("–≤–µ–ª–æ—Å–∏–ø–µ–¥", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", Permission.yes.rawValue)
    case "bus": ("–∞–≤—Ç–æ–±—É—Å", "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π", Permission.yes.rawValue)
    case "airplane": ("—Å–∞–º–æ–ª–µ—Ç", "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π", Permission.yes.rawValue)
    case "train": ("–ø–æ–µ–∑–¥", "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π", Permission.yes.rawValue)
    case "ship": ("–∫–æ—Ä–∞–±–ª—å", "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π", Permission.yes.rawValue)
    case "motorcycle": ("–º–æ—Ç–æ—Ü–∏–∫–ª", "–±–µ–∑–¥–∞—Ä–æ–∂–Ω—ã–π", Permission.no.rawValue)
    case "electric scooter": ("—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∫—É—Ç–µ—Ä", "–≥–æ—Ä–æ–¥—Å–∫–æ–π", Permission.yes.rawValue)
    default: ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", Permission.unknown.rawValue)
    }
    print("–¢–∏–ø: \(tuple.type)\nO–ø–∏—Å–∞–Ω–∏–µ: \(tuple.description)\n–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –∑–æ–Ω–∞—Ö –¥–ª—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: \(tuple.permission)")
}
vehicleDescription(type: vehicleType)

// MARK: - Task #2 [eazy] ‚úÖ

print("\nTask #2")
//func checkTimeYear(timeYear: String) -> String {
//    switch timeYear {
//    case TimeYear.winter.rawValue: "–ó–∏–º–∞"
//    case TimeYear.spring.rawValue: "–í–µ—Å–Ω–∞"
//    case TimeYear.summer.rawValue: "–õ–µ—Ç–æ"
//    case TimeYear.autumn.rawValue: "–û—Å–µ–Ω—å"
//    default: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
//    }
//    return timeYear
//}
enum Hemisphere: String {
    case north = "—Å–µ–≤–µ—Ä"
    case south = "—é–≥"
}

enum TimeYear: String {
    case winter = "–∑–∏–º–∞"
    case spring = "–≤–µ—Å–Ω–∞"
    case summer = "–ª–µ—Ç–æ"
    case autumn = "–æ—Å–µ–Ω—å"
}
func phaseSeason(month: Int) -> String {
    if month % 3 == 0 {
        return "–Ω–∞—á–∞–ª–æ"
    }
    else if (month % 3) + 1 == 0 || month == 1 {
        return "—Å–µ—Ä–µ–¥–∏–Ω–∞"
    }
    else {
        return "–∫–æ–Ω–µ—Ü"
    }
}

func periodMonth(day: Int) -> String {
    switch day {
    case 0...10: return "–Ω–∞—á–∞–ª–æ"
    case 11...20: return "—Å–µ—Ä–µ–¥–∏–Ω–∞"
    default: return "–∫–æ–Ω–µ—Ü"
    }
}

func checkMonth(month: Int, day: Int, hemisphere: String) {
    var timeYear = "unknown"
    let phase, period: String
    let north = Hemisphere.north.rawValue
    let winter = TimeYear.winter.rawValue, spring = TimeYear.spring.rawValue
    let summer = TimeYear.summer.rawValue, autumn = TimeYear.autumn.rawValue
    if (month < 1 || month > 12) || (day < 1 || month > 31) {
        print("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    } else {
        switch month {
        case 12, 1...2:
            if hemisphere == north {
                timeYear = winter
            } else {
                timeYear = summer
            }
        case 3...5:
            if hemisphere == north{
                timeYear = spring
            } else {
                timeYear = autumn
            }
        case 6...8:
            if hemisphere == north {
                timeYear = summer
            } else {
                timeYear = winter
            }
        case 9...11:
            if hemisphere == north {
                timeYear = autumn
            } else {
                timeYear = spring
            }
        default: print("–Ω–µ –≤–µ—Ä–Ω–æ")
        }
        phase = phaseSeason(month: month)
        period = periodMonth(day: day)
        print("–í—Ä–µ–º—è –≥–æ–¥–∞: \(timeYear)\n–§–∞–∑–∞ –≥–æ–¥–∞: \(phase)\n–ü–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–∞: \(period)")
    }
}
checkMonth(month: 12, day: 12, hemisphere: Hemisphere.north.rawValue)


// MARK : - Task #3 [easy+] ‚úÖ

print("\nTask #3")
print("–í–Ω–∏–º–∞–Ω–∏–µ! –î–∏–∞–ø–æ–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫ –æ—Ç 1 –¥–æ 100")
print("–û—Ç 1 –¥–æ 29: –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
print("–û—Ç 30 –¥–æ 59: —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
print("–û—Ç 60 –¥–æ 89: –•–æ—Ä–æ—à–æ")
print("–û—Ç 90 –¥–æ 100: –û—Ç–ª–∏—á–Ω–æ")

let grade : Int? = 5
let activityInClass : Bool? = false

//enum StrGrade: String {
//    case unsatisfactory = "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
//    case satisfactory = "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
//    case fine = "—Ö–æ—Ä–æ—à–æ"
//    case great = "–æ—Ç–ª–∏—á–Ω–æ"
//}

func checkActivity(grade: Int, activity: Bool) -> Bool {
    var result = false
    if activity {
        let newGrade = grade + 5 // 39 + 5 = 44
        let oldPosition = grade / 10 // 4
        let newPosition = newGrade / 10 // 4
        if oldPosition != newPosition {
            result = true
        }
    }
    return result
}

func checkGradeStudent(grade: Int?, activityInClass: Bool) {
    if let gradeValue = grade {
        if gradeValue >= 1 && gradeValue <= 100 {
            let gradePrint = switch gradeValue {
            case 1...39:
                if checkActivity(grade: gradeValue, activity: activityInClass) {
                    "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                } else {
                    "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                }
            case 50...69:
                if checkActivity(grade: gradeValue, activity: activityInClass) {
                    "—Ö–æ—Ä–æ—à–æ"
                } else {
                    "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                }
            case 70...89:
                if checkActivity(grade: gradeValue, activity: activityInClass) {
                    "–æ—Ç–ª–∏—á–Ω–æ"
                } else {
                    "—Ö–æ—Ä–æ—à–æ"
                }
            case 90...100:
                "–æ—Ç–ª–∏—á–Ω–æ"
            default:
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            }
            if activityInClass {
                print("\n–û—Ü–µ–Ω–∫–∞ (\(gradeValue)): \(gradePrint) (–±–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")
            } else {
                print("\n–û—Ü–µ–Ω–∫–∞ (\(gradeValue)): \(gradePrint)")
            }
            
        } else {
            print("–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
        }
    } else {
        print("–û—Ü–µ–Ω–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    }
}
checkGradeStudent(grade: 39, activityInClass: true)

// MARK : - Task #4 [easy+] ‚úÖ

print("\nTask #4")
///–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ –≤—Ä–µ–º—è, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
///- Parameters:
/// - name: –∏–º—è
/// - time: –≤—Ä–µ–º—è
func greet (name: String?, time: Int?) {
    let unWrappingName = name ?? "–≥–æ—Å—Ç—å"
    let baseText = "–ü—Ä–∏–≤–µ—Ç, \(unWrappingName), —è —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å :)"
    var finalTime = ""
    if unWrappingName.count >= 3 {
        if let unWrappingTime = time, unWrappingTime >= 0 && unWrappingTime <= 23  {
            finalTime = switch unWrappingTime {
            case 0...4:
                "–ø–æ–∑–¥–Ω—è—è –Ω–æ—á—å üåô"
            case 5...6:
                "—Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ ‚òÄÔ∏è"
            case 7...11:
                "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ ‚òÄÔ∏è"
            case 12...14:
                "–ø–æ–ª–¥–µ–Ω—å ‚òÄÔ∏è"
            case 15...17:
                "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å ‚õÖÔ∏è"
            case 18...20:
                "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä üåñ"
            case 21...23:
                "–ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä üåò"
            case let wrongTime:
                "—É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è \(wrongTime) "
            }
            print("–ù–∞ –¥–≤–æ—Ä–µ \(finalTime), —É–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞, \(unWrappingName)")
        } else {
            print(baseText)
        }
    } else {
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è, –ø—Ä–æ—Å—å–±–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    }
}
greet(name: "userName" , time: 12)

// MARK: - Task #5 [medium] ‚úÖ

print("\nTask #5")

func square(number: Double?) -> Double? {
    if let unWrappingNumber = number {
        return unWrappingNumber * unWrappingNumber
    } else {
        return nil
    }
}

func squareRoot(number: Double?) {
    if var unWrappingNumber = number {
        let sqrtNumber = sqrt(unWrappingNumber)
        print("–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏–ª—Å–∞ \(unWrappingNumber) —Ä–∞–≤–µ–Ω: \(sqrtNumber) –∏–ª–∏ -(\(sqrtNumber))")
    } else {
        print("nil")
    }
}

let test1 = square(number: 5.25)
let test2 = square(number: -5.25)
let test3 = square(number: nil)
squareRoot(number: test2)
squareRoot(number: test3)

// MARK: - Task #6 [medium]

print("\nTask #6")
func average(num1: Int, num2: Int, num3: Int? = nil) -> Int? {
    guard let unWrapNum3 = num3 else {
        return (num1 + num2) / 2
    }
    if num1 > 0 && num2 > 0 && unWrapNum3 > 0 {
        return (num1 + num2 + unWrapNum3) / 3
    } else {
        print("–ù–µ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
        return nil
    }
}

func average(num1: Int, num2: Int, num3: Int, num4: Int?) -> Int? {
    guard let unWrapNum4 = num4 else {
        print("4 –∞—Ä–≥—É–º–µ–Ω—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º nil - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
        return nil
    }
    if num1 > 0 && num2 > 0 && num3 > 0 && unWrapNum4 > 0 {
        return (num1 + num2 + num3 + unWrapNum4) / 4
    } else {
        print("–ù–µ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
        return nil
    }
}

average(num1: 10, num2: 5)
average(num1: 10, num2: 3, num3: 20, num4: 12)
