import UIKit
import Foundation
// MARK: - Task #1 [eazy] ‚úÖ

let firstName = "Arnak"
let lastName = "Nersisyan"
let fullName = "\(firstName) \(lastName)"
let greeting = "Hello, my name is \(fullName)!"
print("Task #1")
print(greeting)

// MARK: - Task #2 [eazy]

let unicodeString = "\u{12e8} \u{2764}"
print("\nTask #2")

print("UTF-8")
for i in unicodeString.utf8 {
    print(i, terminator: " ")
}
print()

print("\nUTF-16:")
for i in unicodeString.utf16 {
    print(i, terminator: " ")
}
print()

print("\nUnicode Scalars:")
for i in unicodeString.unicodeScalars {
    print(i.value, terminator: " ")
}
print()

// MARK: - Task #3 [eazy]

var mutableString = "I want to sleep"
mutableString.append(" :(")

if let sleep = mutableString.range(of: "sleep") {
    mutableString.replaceSubrange(sleep, with: "sleeeep")
}
print("\nTask #3")
print(mutableString)

// MARK: - TASK #4 [eazy]

let sampleString = "Dreams Infold Softly as Night Blankets the World in Silence"
let startIndex = sampleString.startIndex
let endIndex = sampleString.index(sampleString.startIndex, offsetBy: 5)
let result = sampleString[startIndex...endIndex]
print("\nTask #4")
print(result)

// MARK: - Task #5 [eazy+] ‚úÖ

print("\nTask #5")
var mutableGreeting = "Night whispers dreams as stars fade, welcoming peaceful slumber‚Äôs embrac"
print("–î–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ '!':\n\(mutableGreeting)\n")

mutableGreeting.insert("!", at: mutableGreeting.endIndex)
print("–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ '!':\n\(mutableGreeting)\n")

let endInd = mutableGreeting.index(before: mutableGreeting.endIndex)
mutableGreeting.remove(at: endInd)
print("–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ '!':\n\(mutableGreeting)\n")

// MARK: - Task #6 [easy+] ‚úÖ

let mySentence = "Hello, what is your name?"
print("\nTask #6")
let prefix = mySentence.prefix(5)
print(prefix)

// MARK: - Task #7 [medium] ‚úÖ

print("\nTask #7")
let str1 = "How are you?"
let str2 = "I am fine, thank you!"
if str1 == str2 {
    print("str1 = str2")
} else {
    print("str1 != str2")
}

let checkPrefix = str1.prefix(3)
let prefixStr1 = str1.hasPrefix(checkPrefix)
print("prefix - \(prefixStr1)")
let prefixStr2 = str2.hasPrefix(checkPrefix)
print("prefix - \(prefixStr2)")

let checkSuffix = str2.suffix(3)
let suffixStr1 = str1.hasSuffix(checkSuffix)
print("suffix - \(suffixStr1)")

let suffixStr2 = str2.hasSuffix(checkSuffix)
print("suffix - \(suffixStr2)")

// MARK: - Task #8 [medium] ‚úÖ

func checkTime(time: Int) {
    if time == 22 || time <= 23 && time >= 0 && time <= 4 {
        print("–î–æ–±—Ä–æ–π –Ω–æ—á–∏ –∏ –∫—Ä–µ–ø–∫–∏—Ö —Å–Ω–æ–≤, –¥—Ä—É–∑—å—è! üåô\n–í—Ä–µ–º—è - \(time):00")
    } else if time >= 18 && time <= 21 {
        print("–í–µ—á–µ—Ä, —Ç–µ–º–Ω–æ –∏ —É—é—Ç–Ω–æ! üåë\n–í—Ä–µ–º—è - \(time):00")
    } else if time >= 13 && time <= 17 {
        print("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥—Ä—É–∑—å—è! –ú–Ω–µ –∏ —Å–ª–æ–≤–æ –¥–æ–±—Ä—ã–π '–Ω—Ä–∞–≤–∏—Ç—Å—è' –∏ '–¥–µ–Ω—å' üòé\n–í—Ä–µ–º—è - \(time):00")
    } else if time >= 5 && time <= 12 {
        print("–£—Ç—Ä–æ –Ω–∞ –¥–≤–æ—Ä–µ ‚òÄÔ∏è\n–í—Ä–µ–º—è - \(time):00")
    } else {
        print("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ!")
    }
}
print("\nTask #8")
checkTime(time: 8)

// MARK: - Task #9 [medium+] ‚úÖ

print("\nTask #9")
let stopNum = 10
var counter = 0
print("num. \(counter)")
while counter < stopNum {
    counter += 1
    print("num. \(counter)")
}
print("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω! üé∞")

// MARK: - Task #10 [medium+] ‚úÖ

print("\nTask #10")
let numberGroups = [
    [3, 5, 11, 19],
    [2, 4, 14, 21],
    [6, 10, 22]
]

func checkMultiple(numberGroups: [[Int]], divider: Int) {
    var checkArrayNumber = 0
    for i in numberGroups {
        checkArrayNumber += 1
        for (index, e) in i.enumerated() {
            if e % divider  == 0 {
                print("–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫—Ä–∞—Ç–Ω–æ–µ '\(divider)' - \(e)")
                print("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ \(checkArrayNumber) –ø–æ–¥–º–∞—Å—Å–∏–≤–µ, –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º - \(index)")
                break
            }
        }
    }
}

checkMultiple(numberGroups: numberGroups, divider: 7)

// MARK: - Task #11 [medium+] ‚úÖ

print("\nTask #11")
let city = "Moscow"
var temperature = 0
if city == "Moscow" {
    temperature = 20
} else if city == "Saint Petersburg" {
    temperature = 15
}

let weatherInfo = "The temperature in \(city) is \(temperature)¬∞C"
print(weatherInfo)

// MARK: - Task #12 [hard] ‚úÖ

print("\nTask #12")
print("true or false?")
let result1 = true && false //false
let result2 = (5 > 3) || (2 > 4) //true
let result3 = (3 == 3) && (2 != 2) //false
let result4 = ((12 / 4) == 3) || ((7 % 2) != 0) // true

// MARK: - Task #13 [hard+]
print("\nTask #13")

enum RegistrationError: Error {
    case weakPassword
}

func checkDog(email: String) -> Bool {
    var resCharDog = false
    for i in email {
        if i == "@" {
            resCharDog = true
        }
    }
    return resCharDog
}

func registerUser(username: String?, password: String?, age: Int?, email: String?) throws {
    guard let username, username.isEmpty == false else {
        print("–û—à–∏–±–∫–∞: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    }
    
    guard let password, password.count >= 6 else {
        print("–û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤")
        throw RegistrationError.weakPassword
    }
    
    guard let age, age >= 18 else {
        print("–û—à–∏–±–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å 18 –ª–µ—Ç")
        return
    }
    
    guard let email, checkDog(email: email) else {
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        return
    }
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \(username) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
}

try registerUser(username: "Arnak", password: nil, age: 20, email: "arnonersi777@gmail.com")




