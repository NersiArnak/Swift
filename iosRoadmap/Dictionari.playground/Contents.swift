import Foundation

// MARK: - Task #1 [easy] ‚úÖ

print("Task #1")
print("–°–æ–∑–¥–∞–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
let dict : [String : Int] = [:] // –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

// MARK: - Task #2 [easy] ‚úÖ // –£—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

print("\nTask #2")
print("–£—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")

// MARK: - Task #3 [easy] ‚úÖ

print("\nTask #3")
var studentScores : [String : Int] = [:]
studentScores["–ê–Ω–Ω–∞"] = 85
studentScores["–ë–æ—Ä–∏—Å"] = 90
studentScores["–í–∏–∫—Ç–æ—Ä–∏—è"] = 95
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: \(studentScores.count)")

if let gradeBoris = studentScores["–ë–æ—Ä–∏—Å"] {
    print("–û—Ü–µ–Ω–∫–∞ –ë–æ—Ä–∏—Å–∞: \(gradeBoris)")
} else {
    print("–£ –±–æ—Ä–∏—Å–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏")
}

studentScores["–ê–Ω–Ω–∞"] = 88
studentScores["–í–∏–∫—Ç–æ—Ä–∏—è"] = nil
print()
print(studentScores)


print()
if studentScores.keys.contains("–î–º–∏—Ç—Ä–∏–π") {
    print("–í —Å–ª–æ–≤–∞—Ä–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
} else {
    print("–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞")
}

print()
studentScores["–î–º–∏—Ç—Ä–∏–π"] = 99
print(studentScores)

studentScores.removeAll()
print(studentScores)

// MARK: - Task #4 [easy] ‚úÖ

print("\nTask #4")
let countryCapitals = ["–†–æ—Å—Å–∏—è": "–ú–æ—Å–∫–≤–∞", "–§—Ä–∞–Ω—Ü–∏—è": "–ü–∞—Ä–∏–∂",
                       "–ì–µ—Ä–º–∞–Ω–∏—è": "–ë–µ—Ä–ª–∏–Ω", "–Ø–ø–æ–Ω–∏—è": "–¢–æ–∫–∏–æ"]

for (keys, value) in countryCapitals {
    print("–°—Ç—Ä–∞–Ω–∞: \(keys), –°—Ç–æ–ª–∏—Ü–∞: \(value)")
}

var array : [String] = []

//for keys in countryCapitals.keys {
//    array.append(keys)
//}

let arrayCountries = countryCapitals.map { (country, capital) in
    return country
}

let arrayCapitals = countryCapitals.map { (country, capital) in
    return capital
}

print("\n–°—Ç—Ä–∞–Ω—ã: \(arrayCountries)")
print("–°—Ç–æ–ª–∏—Ü—ã: \(arrayCapitals)")


func getCapitals(dictCountyry: [String : String], country: String) -> String? {
    return dictCountyry[country]
}

getCapitals(dictCountyry: countryCapitals, country: "–†–æ—Å—Å–∏—è")
getCapitals(dictCountyry: countryCapitals, country: "–ê—Ä–º–µ–Ω–∏—è")

// MARK: - Task #5 [easy+] ‚úÖ

print("\nTask #5")
var productPrices : [String : Double] = ["–•–ª–µ–±": 50, "–ú–æ–ª–æ–∫–æ": 80, "–°—ã—Ä": 300, "–Ø–±–ª–æ–∫–∏": 150]

if let unWrapChees = productPrices["–°—ã—Ä"] {
    productPrices["–°—ã—Ä"] = unWrapChees * 0.9
}

productPrices["–ú–æ–ª–æ–∫–æ"] = nil
productPrices["–ë–∞–Ω–∞–Ω—ã"] = 120

var index = 1
for (keys, value) in productPrices {
    print("\(index). \(keys): \(value)")
    index += 1
}

let newProductPrices = productPrices.map { (product, price) in
    return (product, price * 1.05)
}
print(productPrices)
print(newProductPrices)

print("\n–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ü–µ–Ω–∞ –Ω–∞ 5%:")
for (keys, value) in newProductPrices {
    print("\(index). \(keys): \(value)")
    index += 1
}

print()
func checkProduct(productList: [String : Double], product: String) -> Double {
    guard let price = productList[product] else {
        print("–û—à–∏–±–∫–∞. –û—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–≤–∞—Ä üì¶")
        return 0
    }
    return price
}

checkProduct(productList: productPrices, product: "–°—ã—Ä")
checkProduct(productList: productPrices, product: "—Å—ã—Ä")

// MARK: - Task #6 [easy+]

print("\nTask #6")
let inputString = "Hello, world"
let filterInput = inputString.filter { $0 != " " }
var dictStrCount = [Character: Int]()
for i in filterInput {
    if let count = dictStrCount[i] {
        dictStrCount[i] = count + 1
    } else {
        dictStrCount[i] = 1
    }
}
print("–°–ª–æ–≤–∞—Ä—å:")
print(dictStrCount)

let sortedDict = dictStrCount.sorted { $0.value > $1.value}
print("\n–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å:")
print(sortedDict)


// MARK: - Task #7 [

print("\nTask #7")
let studentGrade = ["–ê–Ω–Ω–∞": 85, "–ë–æ—Ä–∏—Å": 90, "–í–∏–∫—Ç–æ—Ä–∏—è": 95, "–î–º–∏—Ç—Ä–∏–π": 90]
var gradeName = [Int : [String]]()

for (keys, value) in studentGrade {
    if var name = gradeName[value] {
        name.append(keys)
        gradeName[value] = name
    } else {
        gradeName[value] = [keys]
    }
}

func getNameGrade(studentGrade: [String : Int], grade: Int) -> [String] {
    var arrayName = [String]()
    for (keys, value) in studentGrade {
        if grade == value {
            arrayName.append(keys)
        }
    }
    return arrayName
}

let testGrade = getNameGrade(studentGrade: studentGrade, grade: 95)
print(testGrade)

// MARK: - Task #8 [medium+] ‚úÖ

print("\nTask #8")
var departmentA : [String : String]  = ["–ò–≤–∞–Ω–æ–≤": "–û—Ç–¥–µ–ª A", "–ü–µ—Ç—Ä–æ–≤": "–û—Ç–¥–µ–ª A", "–°–∏–¥–æ—Ä–æ–≤": "–û—Ç–¥–µ–ª A"]
var departmentB = ["–°–º–∏—Ä–Ω–æ–≤": "–û—Ç–¥–µ–ª B", "–ö—É–∑–Ω–µ—Ü–æ–≤": "–û—Ç–¥–µ–ª B", "–ò–≤–∞–Ω–æ–≤": "–û—Ç–¥–µ–ª B"]
var departmentGlobal = [String : String]()

departmentGlobal = departmentA

for (keys, value) in departmentB {
    departmentGlobal[keys] = value
}

func printDepartment(department: [String : String]) {
    for (keys, value) in department {
        print("–°–æ—Ç—Ä—É–¥–Ω–∏–∫: \(keys), –û—Ç–¥–µ–ª: \(value)")
    }
}

printDepartment(department: departmentGlobal)

print()
var newDepartment = [String : [String]]()
for (keys, value) in departmentGlobal {
    if var name = newDepartment[value] {
        name.append(keys)
        newDepartment[value] = name
    } else {
        newDepartment[value] = [keys]
    }
}

for (keys, value) in newDepartment {
    print("\(keys), –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: \(value)")
}

// MARK: - Task #9 [hard]

print("\nTask #9")
let studentGrades = [
    "–ê–Ω–Ω–∞": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 90, "–§–∏–∑–∏–∫–∞": 85],
    "–ë–æ—Ä–∏—Å": ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 75, "–§–∏–∑–∏–∫–∞": 80, "–•–∏–º–∏—è": 95],
    "–í–∏–∫—Ç–æ—Ä–∏—è": ["–§–∏–∑–∏–∫–∞": 100, "–•–∏–º–∏—è": 100]
]

func studentGPA(studentGrades: [String: [String: Int]]) {
    var studentGPA = [String : Int]()
    var lessonsGPA = [String : Int]()
    var sumMath = 0, sumPhysics = 0, sumChimia = 0, lessonGPA = 0
    for (name, lesson) in studentGrades {
        var sumGrade = 0, lessonCount = 0, gpa = 0
        var countStudent = studentGrades.count
        for (lessonName, grade) in lesson {
            lessonCount = lesson.count
            sumGrade += grade
            gpa = Int(Double(sumGrade / lessonCount))
            
            // MARK: –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
            
            if lessonName == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" {
                sumMath += grade
                lessonGPA = Int(Double(sumMath / countStudent))
            }
            if lessonName == "–§–∏–∑–∏–∫–∞" {
                sumPhysics += grade
                lessonGPA = Int(Double(sumPhysics / countStudent))
            }
            if lessonName == "–•–∏–º–∏—è" {
                sumChimia += grade
                lessonGPA = Int(Double(sumChimia / countStudent))
                
            }
            lessonsGPA[lessonName] = lessonGPA
        }
        studentGPA[name] = gpa
    }
    
    var maxGPA : Int?
    var studentName : String = ""
    for (name, gpa) in studentGPA {
        if gpa > 90 {
            print("–°—Ç—É–¥–µ–Ω—Ç: \(name), —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - \(gpa), —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ª–∏—á–Ω—ã–π (90+) ")
        } else {
            print("–°—Ç—É–¥–µ–Ω—Ç: \(name), —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - \(gpa)")
        }
        if maxGPA == nil || maxGPA! < gpa {
            maxGPA = gpa
            studentName = name
        }
        
    }
    print("\n–ù–∞–∏–≤—ã—Å—à–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - \(maxGPA!) (\(studentName))")
    
    print()
    for (lesson, gpa) in lessonsGPA {
        print("–ü—Ä–µ–¥–º–µ—Ç, \(lesson), —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - \(gpa)")
    }
}

studentGPA(studentGrades: studentGrades)

