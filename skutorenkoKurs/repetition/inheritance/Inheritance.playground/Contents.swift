// MARK: class work
/*final*/ class Human {
    final var finalProperty: String = "final"
    var firstName: String = " "
    var lastName: String = " "
    
    var fullName: String {
        return firstName + " " + lastName
    }
    
    func sayHello() -> String {
        return "Hello, \(fullName)"
    }
}

class SmartHuman : Human {
    
}

class Student : SmartHuman {
    override func sayHello() -> String {
        return super.sayHello() + ", my friend"
    }
}

class Kid : Human {
    var favoriteToy = "iMac"
    override func sayHello() -> String {
        return "agu"
    }
    
    override var fullName: String {
        return firstName
    }
    
    override var firstName: String {
        set {
            super.firstName = newValue + " :)"
        }
        get {
            return super.firstName
        }
    }
    
    override var lastName: String {
        didSet {
            print("new value - \(self.lastName)")
        }
    }
}

let human = Human()
human.firstName = "John"
human.lastName = "Doe"
human.fullName
human.sayHello()

let student = Student()
student.firstName = "Arnak"
student.lastName = "Nersisyan"
student.fullName
student.sayHello()

let kid = Kid()
kid.firstName = "Gari"
kid.lastName = "Nersisyan"
kid.fullName
kid.sayHello()

let array : [Human] = [human, kid, student]

for value in array {
    print(value.sayHello())
}


// MARK: home work
print("\n‚Ññ1")
class Artist {
    var name: String
    var surname: String
    var fullname: String {
        return name + " " + surname
    }
    
    func perfomance() {
        print("\(name) \(surname) - –≤—ã—Å—Ç—É–ø–∞–µ—Ç")
    }
    
    init(name: String, surname: String) {
        self.name = name
        self.surname = surname
    }
}

class Actor : Artist {
    var genre : String
    
    override func perfomance() {
        print("\(name) \(surname) - –∞–∫—Ç–µ—Ä, –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ –∂–∞–Ω—Ä–µ: \(genre) üé≠")
    }
    
    init(name: String, surname: String, genre: String) {
        self.genre = genre
        super.init(name: name, surname: surname)
    }
}

class Dancer : Artist {
    let typeArtist = "—Ç–∞–Ω—Ü–æ—Ä"
    override func perfomance() {
        print("\(name) \(surname) - \(typeArtist) üíÉ")
    }
}

class Drower : Artist {
    private var typeDrower = "–ø–æ—Å—Ç–∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç"
    override var fullname : String {
        return super.fullname + " - great drower üé®"
    }
    override func perfomance() {
        print("\(name) \(surname) - —Ö—É–¥–æ–∂–Ω–∏–∫, \(typeDrower) üé®")
    }
}

let actor = Actor(name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", surname: "–ü–æ–ø–æ–≤", genre: "–∫–æ–º–µ–¥–∏—è")
let dancer = Dancer(name: "–°–∞–º–≤–µ–ª", surname: "–°–µ—Ä–¥—é–∫—è–Ω")
let drower = Drower(name: "–ú–∞–∫—Å", surname: "–î—É–º–æ–≤")

var arrayArtist : [Artist] = [actor, dancer, drower]
for i in arrayArtist {
    i.perfomance()
}

print("\n‚Ññ2")

class Vehicle {
    var nameVehicle : TypeVhicle
    var speed : Double {
        return 0
    }
    var —Åapacity : Int {
        return 0
    }
    var priceOneTrip : Double {
        return 0
    }
    var countOfPassengers : Int
    
    enum TypeVhicle : String {
        case airplane = "—Å–∞–º–æ–ª–µ—Ç üõ©"
        case ship = "–∫–æ—Ä–∞–±–ª—å üõ≥ "
        case helicopter = "–≤–µ—Ä—Ç–æ–ª–µ—Ç üöÅ"
        case car = "–º–∞—à–∏–Ω–∞ üöò"
        case train = "–ø–æ–µ–∑–¥ üöÇ"
    }
    
    init(nameVehicle : TypeVhicle, countOfPassengers : Int) {
        self.nameVehicle = nameVehicle
        self.countOfPassengers = countOfPassengers
        if countOfPassengers > —Åapacity {
            self.countOfPassengers = 0
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤(\(countOfPassengers)) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å(\(—Åapacity))")
        }
    }
}

class Airplane : Vehicle {
    override var speed : Double {
        return 800
    }
    override var —Åapacity : Int {
        return 155
    
    }
    override var priceOneTrip : Double {
        return 150
    }
}

class Ship : Vehicle {
    override var speed : Double {
        return 48
    }
    override var —Åapacity : Int {
        return 400
    }
    override var priceOneTrip : Double {
        return 250
    }
}

class Helicopter : Vehicle {
    override var speed : Double {
        return 220
    }
    override var —Åapacity : Int {
        return 22
    }
    override var priceOneTrip : Double {
        return 350
    }
}

class Car : Vehicle {
    override var speed : Double {
        return 80
    }
    override var —Åapacity : Int {
        return 5
    }
    override var priceOneTrip : Double {
        return 100
    }
}

class Train : Vehicle {
    override var speed : Double {
        return 50
    }
    override var —Åapacity : Int {
        return 500
    }
    override var priceOneTrip : Double {
        return 80
    }
}

let airplane = Airplane(nameVehicle: .airplane, countOfPassengers: 25)
let ship = Ship(nameVehicle: .ship, countOfPassengers: 100)
let helicopter = Helicopter(nameVehicle: .helicopter, countOfPassengers: 10)
let car = Car(nameVehicle: .car, countOfPassengers: 4)
let train = Train(nameVehicle: .train, countOfPassengers: 100)

let arrayOfVehicles: [Vehicle] = [airplane, ship, helicopter, car, train]

func transport–°omparison(distance: Double, array: [Vehicle]) {
    
    //–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª–µ—Ç
    func calculateTime(speed : Double) -> Double {
        return distance / speed
    }
    
    //–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–∞ –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    func calculatePrice(priceOneTrip: Double, countOfPassengers: Int) -> Double {
        return priceOneTrip * Double(countOfPassengers)
    }
    
    //–°—á–∏—Ç–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–ª–µ—Ç
    func minTimeVehicle(array: [Vehicle]) -> (Double, String) {
        var min : Double?
        var nameVehicle = ""
        for i in array {
            if min == nil || calculateTime(speed: i.speed) < min! {
                min = calculateTime(speed: i.speed)
                nameVehicle = i.nameVehicle.rawValue
            }
        }
        print("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–ª–µ—Ç: \(min!)—á, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - \(nameVehicle)")
        return (min!, nameVehicle)
    }
    
    //–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥
    func priceToAllTrip(array: [Vehicle]) -> (Double, Int) {
        var allPrice : Double = 0
        var countVehicle : Int = 0
        for i in array {
            allPrice += calculatePrice(priceOneTrip: i.priceOneTrip, countOfPassengers: i.countOfPassengers)
            countVehicle += 1
        }
        print("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫ - \(allPrice)$, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - \(countVehicle)")
        return (allPrice, countVehicle)
    }
    
    minTimeVehicle(array: array)
    priceToAllTrip(array: array)
}

transport–°omparison(distance: 1000, array: arrayOfVehicles)

print("\n‚Ññ3")

class LivingOrganism {
    var TypeLivingOrganism : TypeLivingOrganism {
        return .people
    }

    var typeGrupp : TypeGrupp {
        return .mammalia
    }
    
    var countLegs : Int? {
        return 0
    }
    
    enum TypeGrupp : String {
        case pisces = "–†—ã–±—ã"
        case amphibia = "–ó–µ–º–Ω–æ–≤–æ–¥–Ω—ã–µ"
        case reptilia = "–ü—Ä–µ—Å–º—ã–∫–∞—é—â–∏–µ—Å—è"
        case aves = "–ü—Ç–∏—Ü—ã"
        case mammalia = "–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ"
        
    }
    
    enum TypeLivingOrganism : String {
        case people = "–ß–µ–ª–æ–≤–µ–∫"
        case animal = "–ñ–∏–≤–æ—Ç–Ω–æ–µ"
    }

}

class People : LivingOrganism {
    override var TypeLivingOrganism : TypeLivingOrganism {
        return .people
    }
    
    override var typeGrupp : TypeGrupp {
        return .mammalia
    }
    
    override var countLegs: Int? {
        return 2
    }
}

class Monkey : LivingOrganism {
    override var TypeLivingOrganism : TypeLivingOrganism {
        return .animal
    }
    
    override var typeGrupp : TypeGrupp {
        return .mammalia
    }
    
    override var countLegs: Int? {
        return 4
    }
}

class Dog : LivingOrganism {
    override var TypeLivingOrganism : TypeLivingOrganism {
        return .animal
    }
    
    override var typeGrupp : TypeGrupp {
        return .mammalia
    }
    
    override var countLegs: Int? {
        return 4
    }
}

class Giraffe : LivingOrganism {
    override var TypeLivingOrganism : TypeLivingOrganism {
        return .animal
    }
    
    override var typeGrupp : TypeGrupp {
        return .mammalia
    }
    
    override var countLegs: Int? {
        return 4
    }
}

class Crocodile : LivingOrganism {
    override var TypeLivingOrganism : TypeLivingOrganism {
        return .animal
    }
    
    override var typeGrupp : TypeGrupp {
        return .reptilia
    }
    
    override var countLegs: Int? {
        return 4
    }
}

let peopleSeda = People()
let peopleKostya = People()
let dogArchi = Dog()
let dogGreys = Dog()
let monkeyAlex = Monkey()
let monkeyOsada = Monkey()
let giraffeMelman = Giraffe()
let giraffeOsk = Giraffe()
let crocodileLacoste = Crocodile()
let crocodileGena = Crocodile()

let arrayAnimals: [LivingOrganism] = [peopleSeda, peopleKostya ,dogArchi, dogGreys, monkeyAlex, monkeyOsada, giraffeMelman, giraffeOsk, crocodileLacoste, crocodileGena]

func calcLivingOrganisms(array: [LivingOrganism]) -> (Int, Int, Int, Int) {
    var countReptilia = 0
    var countFourLegs = 0
    var countAnimals = 0
    var countLivingOrganism = 0
    for i in array {
        if i.TypeLivingOrganism == .animal {
            countAnimals += 1
        }
        if i.countLegs == 4 {
            countFourLegs += 1
        }
        if i.typeGrupp == .reptilia {
            countReptilia += 1
        }
        countLivingOrganism += 1
    }
    
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏—Ö - \(countReptilia)")
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö - \(countFourLegs)")
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö - \(countAnimals)")
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤ - \(countLivingOrganism)")
    return (countReptilia, countFourLegs, countAnimals, countLivingOrganism)
}

calcLivingOrganisms(array: arrayAnimals)
